# Name of the GitHub Action workflow
name: Daily Checks for app/code/Ecommerce121

# Specifies when the workflow runs
on:
  # Scheduled to run daily at midnight
  schedule:
    - cron: '0 0 * * *' 
  # Also triggers on pushes to the 'integration' branch
  push: 
    branches:
      - integration 

# Environment variables accessible across all jobs
env:
  BOT_NAME: 'GitHub Actions Bot'
  BOT_EMAIL: 'actions@github.com'

# Defining jobs
jobs:
  # First job: daily checks
  daily-checks:
    runs-on: ubuntu-latest

    steps:
    # Checking out the repository code
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        ref: ${{ github.head_ref }}

    # Setting global git configurations
    - name: Set Git config
      run: |
        git config user.name "${{ env.BOT_NAME }}"
        git config user.email "${{ env.BOT_EMAIL }}"
      continue-on-error: true

    # Setting up PHP environment with required extensions and tools
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.1'
        extensions: mbstring, intl, gd, xml, soap, zip, pdo_mysql
        tools: composer, cs2pr

    # Caching Composer's vendor folder for faster dependency installation in future runs
    - name: Cache Composer dependencies
      uses: actions/cache@v2
      with:
        path: vendor
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: ${{ runner.os }}-composer-

    # Installing common dependencies shared across jobs
    - name: Install common dependencies
      run: composer require --dev phpstan/phpstan magento/magento-coding-standard friendsofphp/php-cs-fixer phpmetrics/phpmetrics phpmd/phpmd vimeo/psalm phpdocumentor/phpdocumentor
      continue-on-error: true

    # Checking PHP syntax (linting)
    - name: Check PHP Syntax (Linting)
      run: find app/code/Ecommerce121 -name "*.php" -exec php -l {} \;
      continue-on-error: true

    # Validating Composer files
    - name: Validate Composer Files
      run: composer validate
      continue-on-error: true

    # Checking Magento coding standards
    - name: Check Magento Coding Standards with XML Report
      run: ./vendor/bin/phpcs app/code/Ecommerce121 --standard=Magento2 --report=xml --report-file=phpcs-report.xml
      continue-on-error: true

    # Running PHPStan for static analysis and deprecated methods
    - name: Run PHPStan for Static Analysis and Deprecated Methods
      run: |
        ./vendor/bin/phpstan analyse app/code/Ecommerce121 --error-format=json > phpstan-report.json
        ./vendor/bin/phpstan analyse app/code/Ecommerce121 --error-format=json > phpstan-deprecations-report.json
      continue-on-error: true

    # Archiving the PHPStan reports for later access
    - name: Archive PHPStan reports
      uses: actions/upload-artifact@v2
      with:
        name: phpstan-reports
        path: |
          phpstan-report.json
          phpstan-deprecations-report.json
      continue-on-error: true

    # Running php-cs-fixer for code standards
    - name: Run php-cs-fixer for Code Standards
      run: ./vendor/bin/php-cs-fixer fix app/code/Ecommerce121
      continue-on-error: true

    # Creating a Pull Request for any detected fixes, but only if there are changes
    - name: Create PR for Fixes (if there are changes)
      env:
        BRANCH_NAME: fixes-branch-${{ github.run_id }}
      run: |
        if [[ `git status --porcelain` ]]; then
          git checkout -b $BRANCH_NAME
          git add app/code/Ecommerce121
          git commit -m "Automated fixes from GitHub Actions"
          git push origin HEAD
          curl \
          -X POST \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/${{ github.repository }}/pulls \
          -d '{
            "title": "Automated Fixes",
            "head": "'"$BRANCH_NAME"'",
            "base": "integration",
            "body": "This PR contains automated fixes generated by GitHub Actions."
          }'
        fi
      continue-on-error: true

    # Archiving the code quality reports for later access
    - name: Archive code quality reports
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: code-quality-reports
        path: |
          phpcs-report.xml
          phpstan-report.json

  # Second job: dependency checks
  dependency-check:
    # This job depends on the completion of the 'daily-checks' job
    needs: daily-checks
    runs-on: ubuntu-latest

    steps:
    # Checking out the repository code
    - name: Checkout code
      uses: actions/checkout@v2

    # Setting global git configurations
    - name: Set Git config
      run: |
        git config user.name "${{ env.BOT_NAME }}"
        git config user.email "${{ env.BOT_EMAIL }}"
      continue-on-error: true

    # Caching Composer's vendor folder for faster dependency installation
    - name: Cache Composer dependencies
      uses: actions/cache@v2
      with:
        path: vendor
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: ${{ runner.os }}-composer-

    # Checking for outdated or vulnerable Composer packages
    - name: Check for outdated or vulnerable Composer packages
      run: composer outdated --strict
      continue-on-error: true

    # Creating a Pull Request for any dependency updates, but only if there are changes
    - name: Create PR for Dependency Updates (if there are changes)
      env:
        BRANCH_NAME: dependency-updates-${{ github.run_id }}
      run: |
        git config --local user.name "${{ env.BOT_NAME }}"
        git config --local user.email "${{ env.BOT_EMAIL }}"
        git checkout -b $BRANCH_NAME
        composer update
        git add composer.lock
        echo "Changed files:"
        git diff --name-only
        if ! git diff-index --quiet HEAD --; then
          git commit -m "Automated dependency updates from GitHub Actions"
          git push origin HEAD
          RESPONSE=$(curl \
          -X POST \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/${{ github.repository }}/pulls \
          -d '{
            "title": "Dependency Updates",
            "head": "'"$BRANCH_NAME"'",
            "base": "integration",
            "body": "This PR contains automated dependency updates generated by GitHub Actions."
          }')
          echo "PR Creation Response:"
          echo "$RESPONSE"
        fi


  # Third job: code complexity analysis
  code-complexity:
    # This job depends on the completion of the 'daily-checks' job
    needs: daily-checks
    runs-on: ubuntu-latest

    steps:
    # Checking out the repository code
    - name: Checkout code
      uses: actions/checkout@v2

    # Setting global git configurations
    - name: Set Git config
      run: |
        git config --local user.name "${{ env.BOT_NAME }}"
        git config --local user.email "${{ env.BOT_EMAIL }}"
      continue-on-error: true
      
    # Setting up PHP environment
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.1'
        tools: composer

    - name: Install PHPMetrics and Analyze code complexity
      run: |
        composer require --dev phpmetrics/phpmetrics
        ./vendor/bin/phpmetrics --report-html=phpmetrics-report.html --report-xml=phpmetrics-report.xml app/code/Ecommerce121

    # Archiving the PHPMetrics report for later access
    - name: Archive PHPMetrics report
      uses: actions/upload-artifact@v2
      with:
        name: phpmetrics-report
        path: phpmetrics-report.html

    # Installing PHPMD and analyzing the code for architecture issues
    - name: Install and Run PHPMD for Code Architecture Analysis
      run: |
        composer require --dev phpmd/phpmd
        ./vendor/bin/phpmd app/code/Ecommerce121 text codesize,unusedcode,naming,design --reportfile phpmd-report.txt
      continue-on-error: true

    # Creating a Pull Request for any PHPMD suggestions, but only if there are changes
    - name: Create PR for PHPMD Suggestions (if there are changes)
      env:
        BRANCH_BASE_NAME: phpmd-suggestions
        TIMESTAMP: ${{ steps.current-time.outputs.current-time }}
      run: |
        BRANCH_NAME=$BRANCH_BASE_NAME-${{ github.run_id }}-$TIMESTAMP
        git checkout -b $BRANCH_NAME
        git add app/code/Ecommerce121
        if ! git diff-index --quiet HEAD --; then
          git commit -m "PHPMD suggestions from GitHub Actions"
          git push origin HEAD
          curl \
          -X POST \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          -d '{
            "title": "PHPMD Suggestions",
            "head": "'"$BRANCH_NAME"'",
            "base": "integration",
            "body": "This PR contains suggestions from PHPMD."
          }'
        fi
      continue-on-error: true

    # Archiving the PHPMD report for later access
    - name: Archive PHPMD report
      uses: actions/upload-artifact@v2
      with:
        name: phpmd-report
        path: phpmd-report.txt


  # Four job: code complexity analysis
  php-insights:
    # This job depends on the completion of the 'daily-checks' job
    needs: daily-checks
    runs-on: ubuntu-latest

    steps:
    # Checking out the repository code
    - name: Checkout code
      uses: actions/checkout@v2

    # Setting global git configurations
    - name: Set Git config
      run: |
        git config --local user.name "${{ env.BOT_NAME }}"
        git config --local user.email "${{ env.BOT_EMAIL }}"
      continue-on-error: true
      
    # Setting up PHP environment
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.1'
        tools: composer
    
    # Install and run PHP Insights
    - name: Install and Run PHP Insights
      run: |
        composer require --dev nunomaduro/phpinsights
        ./vendor/bin/phpinsights analyse app/code/Ecommerce121 > phpinsights-output.txt
    
    # Create GitHub Issue for PHP Insights suggestions
    - name: Create GitHub Issue for PHP Insights Suggestions
      run: |
        # Preprocess the output to make it more structured
        ISSUES=$(cat phpinsights-output.txt | sed 's/\\n/\n/g' | sed 's/\\u001b\[[0-9;]*m//g' | head -n 300)
        
        # Construct the body content
        BODY_CONTENT="Below are the summarized suggestions from PHP Insights for improving the code quality:\n\n\`\`\`\n$ISSUES\n\`\`\`\n\nFor full details, please refer to the PHP Insights artifact attached to this workflow run."
        
        # Create the issue
        jq -n \
          --arg title "Code Improvement Suggestions from PHP Insights" \
          --arg body "$BODY_CONTENT" \
          '{
            title: $title,
            body: $body,
            labels: ["refactor", "automated"]
          }' | \
        curl \
          -X POST \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          -d @- \
          https://api.github.com/repos/${{ github.repository }}/issues
      continue-on-error: true
    
    # Run Rector for code improvements
    - name: Install and Run Rector for Code Improvements
      run: |
        composer require --dev rector/rector
        ./vendor/bin/rector process app/code/121Ecommerce
    
    # Create PR for Rector's Refactors (if there are changes)
    - name: Create PR for Rector Refactors (if there are changes)
      run: |
        BRANCH_NAME=$BRANCH_BASE_NAME-${{ github.run_id }}
        git checkout -b $BRANCH_NAME
        git add app/code/121Ecommerce || echo "No changes in app/code/121Ecommerce"
        if ! git diff-index --quiet HEAD --; then
          git commit -m "Rector refactors from GitHub Actions for 121Ecommerce"
          git push origin HEAD
          curl \
          -X POST \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/${{ github.repository }}/pulls \
          -d '{
            "title": "Rector Refactors for 121Ecommerce",
            "head": "'"$BRANCH_NAME"'",
            "base": "integration",
            "body": "This PR contains refactors generated by Rector for 121Ecommerce directory."
          }'
        else
          echo "No changes made by Rector."
        fi
      continue-on-error: true
      env:
        BRANCH_BASE_NAME: rector-refactors
